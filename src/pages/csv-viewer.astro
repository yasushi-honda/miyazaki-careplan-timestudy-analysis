---
import Layout from '../layouts/Layout.astro';
import { individualBeforeData, individualAfterData, businessBeforeData, businessAfterData } from '../data/csvDataJson.js';

// CSVファイルのパス
const csvFiles = [
  { name: '個人導入前', path: 'individual_before.csv' },
  { name: '個人導入後', path: 'individual_after.csv' },
  { name: '事業所導入前', path: 'business_before.csv' },
  { name: '事業所導入後', path: 'business_after.csv' }
];

// 実際のデータを取得
const csvData = [
  individualBeforeData,
  individualAfterData,
  businessBeforeData,
  businessAfterData
];

// CSVファイルのマッピング情報
const csvFileInfo = {
  'individual_before.csv': {
    totalRows: individualBeforeData.length,
    description: '個人導入前データ'
  },
  'individual_after.csv': {
    totalRows: individualAfterData.length,
    description: '個人導入後データ'
  },
  'business_before.csv': {
    totalRows: businessBeforeData.length,
    description: '事業所導入前データ'
  },
  'business_after.csv': {
    totalRows: businessAfterData.length,
    description: '事業所導入後データ'
  }
};

// CSVデータの情報を生成
const csvInfos = csvFiles.map((file, index) => {
  const data = csvData[index];
  const headers = data.length > 0 ? Object.keys(data[0]) : [];
  
  return {
    name: file.name,
    path: file.path,
    info: {
      stats: {
        totalRows: data.length,
        validRows: data.filter(row => Object.values(row).some(val => val && val.trim && val.trim() !== '')).length,
        headerCount: headers.length,
        headers: headers
      },
      sampleData: data.slice(0, 5)
    }
  };
});

// ヘッダーの説明を提供する関数
function getHeaderDescription(header) {
  const descriptions = {
    '記入者': 'データを記録した担当者の名前',
    '記入日': 'データが記録された日付',
    '利用者ID': '介護サービス利用者の識別番号',
    '利用者名': '介護サービス利用者の氏名',
    '事業所ID': '介護サービス提供事業所の識別番号',
    '事業所名': '介護サービス提供事業所の名称',
    '開始時間': '業務の開始時刻',
    '終了時間': '業務の終了時刻',
    '所要時間': '業務の実施に要した時間（分）',
    '業務分類': '実施した業務のカテゴリ',
    '業務内容': '実施した業務の詳細内容',
    '業務詳細': '業務に関する追加情報',
    '移動手段': '業務のために使用した移動方法',
    '移動時間': '移動に要した時間（分）',
    '備考': '追加の注釈や特記事項',
    '1ヶ月あたりの提供票作成時間（分）': '1ヶ月間に提供票を作成するのに要する平均時間',
    '1ヶ月あたりの実績確認時間（分）': '1ヶ月間に実績を確認するのに要する平均時間',
    '利用者からのケアプラン修正依頼を受けてから修正完了までに要する時間（分）': 'ケアプラン修正依頼から完了までの平均所要時間',
    'ケアプラン共有方法': 'ケアプランを関係者と共有するために使用している方法',
    '共有方法': 'データや情報を共有するために使用している方法',
    'システム利用率': 'システムを利用している割合（%）'
  };
  
  return descriptions[header] || `${header}に関するデータ`;
}
---

<Layout title="CSVデータビューア | 宮崎ケアプラン分析">
  <main class="container">
    <section class="page-header">
      <h1>CSVデータビューア</h1>
      <p class="lead">
        分析に使用されているCSVデータの内容を確認できます。各ファイルのデータ構造と内容を視覚的に表示します。
      </p>
    </section>
    
    <div class="file-tabs">
      {csvFiles.map((file, index) => (
        <button class={`file-button ${index === 0 ? 'active' : ''}`} data-index={index}>
          {file.name}
        </button>
      ))}
    </div>
    
    {csvInfos.map((csvInfo, fileIndex) => (
      <div id={`file-${fileIndex}`} class="csv-info-container" style={fileIndex === 0 ? "" : "display: none;"}>
        <div class="file-header card">
          <h2>{csvInfo.name} ({csvInfo.path})</h2>
          <div class="file-description">
            <p>このデータは{csvInfo.name.includes('個人') ? '個人レベル' : '事業所レベル'}での{csvInfo.name.includes('導入前') ? 'システム導入前' : 'システム導入後'}の情報を含んでいます。</p>
            <p>{csvFileInfo[csvInfo.path].description}</p>
          </div>
          
          <div class="file-stats">
            <div class="stat-item">
              <div class="stat-value" id={`total-rows-${fileIndex}`}>{csvInfo.info.stats.totalRows}</div>
              <div class="stat-label">総行数</div>
            </div>
            <div class="stat-item">
              <div class="stat-value" id={`valid-rows-${fileIndex}`}>{csvInfo.info.stats.validRows}</div>
              <div class="stat-label">有効行数</div>
            </div>
            <div class="stat-item">
              <div class="stat-value" id={`header-count-${fileIndex}`}>{csvInfo.info.stats.headerCount}</div>
              <div class="stat-label">項目数</div>
            </div>
          </div>
        </div>
        
        <div class="header-stats-card card">
          <h3><span class="icon">🔍</span>データ項目の説明</h3>
          <div class="header-grid">
            {csvInfo.info.stats.headers.map((header, index) => (
              <div class="header-item">
                <div class="header-name">{header}</div>
                <div class="header-description">{getHeaderDescription(header)}</div>
              </div>
            ))}
          </div>
        </div>
        
        <div class="sample-data-card card">
          <h3><span class="icon">📋</span>サンプルデータ</h3>
          <div class="table-responsive">
            <table class="data-table">
              <thead>
                <tr id={`header-row-${fileIndex}`}>
                  {csvInfo.info.stats.headers.map(header => (
                    <th>{header}</th>
                  ))}
                </tr>
              </thead>
              <tbody id={`sample-data-${fileIndex}`}>
                {csvInfo.info.sampleData.map(row => (
                  <tr>
                    {csvInfo.info.stats.headers.map(header => (
                      <td>{row[header] || ''}</td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
        
        <div class="card">
          <h3><span class="icon">📊</span>データ分析</h3>
          <p>このデータセットは、{csvInfo.name.includes('個人') ? '個人ケアマネージャー' : '事業所'}の{csvInfo.name.includes('導入前') ? 'システム導入前' : 'システム導入後'}の業務効率を分析するために使用されています。</p>
          
          <div class="analysis-actions">
            <a href={csvInfo.name.includes('個人') ? '/individual' : '/business'} class="btn-primary">
              <span class="btn-icon">📈</span>詳細分析を見る
            </a>
            <a href="/" class="btn-secondary">
              <span class="btn-icon">🏠</span>ホームに戻る
            </a>
          </div>
        </div>
      </div>
    ))}
  </main>
</Layout>

<script is:inline>
  // ファイル選択ボタンの動作
  window.addEventListener('load', function() {
    const fileButtons = document.querySelectorAll('.file-button');
    const fileContainers = document.querySelectorAll('.csv-info-container');
    
    fileButtons.forEach((button, index) => {
      button.addEventListener('click', () => {
        // すべてのコンテナを非表示にする
        fileContainers.forEach(container => {
          container.style.display = 'none';
        });
        
        // 選択されたファイルのコンテナを表示する
        fileContainers[index].style.display = 'block';
        
        // アクティブなボタンのスタイルを更新
        fileButtons.forEach(btn => {
          btn.classList.remove('active');
        });
        button.classList.add('active');
      });
    });
  });
</script>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
  }
  
  .page-header {
    text-align: center;
    margin-bottom: 2rem;
    padding: 2rem 0;
  }
  
  .lead {
    font-size: 1.125rem;
    color: var(--text-secondary);
    max-width: 800px;
    margin: 0 auto;
    line-height: 1.6;
  }
  
  .card {
    background-color: var(--bg-secondary);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    padding: 1.5rem;
    margin-bottom: 2rem;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    overflow: hidden;
    position: relative;
  }
  
  .card h2, .card h3 {
    display: flex;
    align-items: center;
    margin-bottom: 1.5rem;
    color: var(--accent);
    border-bottom: 2px solid var(--border-color);
    padding-bottom: 0.75rem;
  }
  
  .icon {
    margin-right: 0.5rem;
    font-size: 1.25rem;
  }
  
  .file-tabs {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 2rem;
    justify-content: center;
  }
  
  .file-button {
    background-color: var(--bg-secondary);
    border: 2px solid var(--border-color);
    border-radius: var(--border-radius);
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    font-weight: 600;
    color: var(--text-primary);
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .file-button:hover {
    background-color: var(--bg-hover);
    transform: translateY(-2px);
  }
  
  .file-button.active {
    background-color: var(--accent);
    color: white;
    border-color: var(--accent);
  }
  
  .file-header {
    position: relative;
    overflow: hidden;
  }
  
  .file-header::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 100px;
    height: 100px;
    background-color: var(--accent);
    opacity: 0.1;
    border-radius: 50%;
    transform: translate(30%, -30%);
  }
  
  .file-description {
    margin-bottom: 1.5rem;
    line-height: 1.6;
  }
  
  .file-stats {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
    margin-top: 1.5rem;
  }
  
  .stat-item {
    text-align: center;
    flex: 1;
    min-width: 100px;
    padding: 1rem;
    background-color: var(--bg-primary);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow-sm);
  }
  
  .stat-value {
    font-size: 2rem;
    font-weight: 700;
    color: var(--accent);
    margin-bottom: 0.5rem;
  }
  
  .stat-label {
    font-size: 0.875rem;
    color: var(--text-secondary);
  }
  
  .header-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1.5rem;
  }
  
  .header-item {
    background-color: var(--bg-primary);
    padding: 1rem;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow-sm);
    transition: transform 0.3s ease;
  }
  
  .header-item:hover {
    transform: translateY(-3px);
    box-shadow: var(--box-shadow);
  }
  
  .header-name {
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--accent);
  }
  
  .header-description {
    font-size: 0.875rem;
    color: var(--text-secondary);
    line-height: 1.5;
  }
  
  .table-responsive {
    overflow-x: auto;
    margin-bottom: 1rem;
  }
  
  .data-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.875rem;
  }
  
  .data-table th, .data-table td {
    padding: 0.75rem;
    text-align: left;
    border-bottom: 1px solid var(--border-color);
  }
  
  .data-table th {
    background-color: var(--bg-primary);
    font-weight: 600;
    color: var(--accent);
    position: sticky;
    top: 0;
    z-index: 10;
  }
  
  .data-table tr:hover {
    background-color: var(--bg-hover);
  }
  
  .analysis-actions {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-top: 1.5rem;
  }
  
  .btn-primary, .btn-secondary {
    display: inline-flex;
    align-items: center;
    padding: 0.75rem 1.5rem;
    border-radius: var(--border-radius);
    font-weight: 600;
    text-decoration: none;
    transition: all 0.3s ease;
  }
  
  .btn-primary {
    background-color: var(--accent);
    color: white;
  }
  
  .btn-primary:hover {
    background-color: var(--accent-dark);
    transform: translateY(-2px);
  }
  
  .btn-secondary {
    background-color: var(--bg-primary);
    color: var(--text-primary);
    border: 1px solid var(--border-color);
  }
  
  .btn-secondary:hover {
    background-color: var(--accent);
    color: white;
  }
  
  .error-message {
    background-color: #fff5f5;
    border-left: 4px solid #f56565;
    color: #c53030;
    padding: 1rem;
    margin-bottom: 1.5rem;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
  }
  
  .error-message p {
    margin: 0.5rem 0;
  }
  
  .error-message strong {
    font-weight: 600;
  }
  
  @media (max-width: 768px) {
    .file-tabs {
      flex-direction: column;
    }
    
    .file-button {
      width: 100%;
    }
    
    .file-stats {
      flex-direction: column;
      gap: 1rem;
    }
    
    .header-grid {
      grid-template-columns: 1fr;
    }
    
    .analysis-actions {
      flex-direction: column;
    }
    
    .btn-primary, .btn-secondary {
      width: 100%;
      justify-content: center;
    }
  }
</style>
