---
import Layout from '../layouts/Layout.astro';
import { getCsvData } from '../data/csvDataJson.js';

// 個人データと事業所データの両方を読み込む
const individualBeforeData = getCsvData('individual_before.csv');
const individualAfterData = getCsvData('individual_after.csv');
const businessBeforeData = getCsvData('business_before.csv');
const businessAfterData = getCsvData('business_after.csv');

// 主要な統計データを計算
const calculateAverageTime = (data, key) => {
  if (!data || data.length === 0) return 0;
  const sum = data.reduce((acc, row) => acc + (parseInt(row[key]) || 0), 0);
  return Math.round(sum / data.length);
};

// 初期値（サーバーサイドレンダリング用）
const beforeAvgCreationTime = calculateAverageTime(individualBeforeData, '1ヶ月あたりの提供票作成時間（分）');
const afterAvgCreationTime = calculateAverageTime(individualAfterData, '1ヶ月あたりの提供票作成時間（分）');
const beforeAvgConfirmationTime = calculateAverageTime(individualBeforeData, '1ヶ月あたりの実績確認時間（分）');
const afterAvgConfirmationTime = calculateAverageTime(individualAfterData, '1ヶ月あたりの実績確認時間（分）');
const beforeAvgModificationTime = calculateAverageTime(individualBeforeData, '利用者からのケアプラン修正依頼を受けてから修正完了までに要する時間（分）');
const afterAvgModificationTime = calculateAverageTime(individualAfterData, '利用者からのケアプラン修正依頼を受けてから修正完了までに要する時間（分）');

// 削減時間の計算
const totalTimeSavedPerMonth = (beforeAvgCreationTime - afterAvgCreationTime) + 
                              (beforeAvgConfirmationTime - afterAvgConfirmationTime) + 
                              (beforeAvgModificationTime - afterAvgModificationTime);

// 削減率の計算
const totalBeforeTime = beforeAvgCreationTime + beforeAvgConfirmationTime + beforeAvgModificationTime;
const efficiencyRate = totalBeforeTime > 0 ? Math.round((totalTimeSavedPerMonth / totalBeforeTime) * 100) : 0;

// 年間削減時間の計算
const annualHoursSaved = Math.floor((totalTimeSavedPerMonth * 12) / 60);
const annualMinutesSaved = (totalTimeSavedPerMonth * 12) % 60;
const remainingMinutes = annualMinutesSaved;

---

<Layout title="宮崎ケアプラン分析">
  <main>
    <section class="hero">
      <div class="container">
        <h1>宮崎県ケアプランデータ連携システム導入支援<br>タイムスタディ分析</h1>
        <p class="lead">
          ケアプランデータ連携システム導入前後のタイムスタディ調査結果を分析し、<br>
          業務効率化の効果を可視化しています。
        </p>
      </div>
    </section>

    <section class="key-findings card">
      <h2>主要な分析結果</h2>
      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-value" id="totalTimeSaved">{totalTimeSavedPerMonth}分/月</div>
          <div class="stat-label">総業務時間削減</div>
          <div class="stat-description">1人あたりの月間削減時間</div>
        </div>
        <div class="stat-card">
          <div class="stat-value" id="efficiencyRate">{efficiencyRate}%</div>
          <div class="stat-label">業務効率化</div>
          <div class="stat-description">月間業務時間の削減率</div>
        </div>
        <div class="stat-card">
          <div class="stat-value" id="annualTimeSaved">{annualHoursSaved}時間{remainingMinutes}分</div>
          <div class="stat-label">年間削減時間</div>
          <div class="stat-description">1人あたりの年間削減時間</div>
        </div>
      </div>
    </section>

    <section class="analysis-options card">
      <h2>分析オプション</h2>
      <div class="options-grid">
        <div class="option-card">
          <h3>個人レベル分析</h3>
          <p>個人レベルでの業務効率化の効果を詳細に分析します。</p>
        </div>
        <div class="option-card">
          <h3>事業所レベル分析</h3>
          <p>事業所全体での導入効果と経済的メリットを分析します。</p>
        </div>
        <div class="option-card">
          <h3>CSVデータ閲覧</h3>
          <p>元のCSVデータを閲覧・確認できます。</p>
        </div>
      </div>
    </section>

    <section class="summary-section">
      <h2>サマリー</h2>
      <div class="summary-stats">
        <div class="stat-card">
          <div class="stat-value">{totalTimeSavedPerMonth}分/月</div>
          <div class="stat-label">総業務時間削減</div>
          <div class="stat-description">1人あたりの月間削減時間</div>
        </div>
        <div class="stat-card">
          <div class="stat-value">{efficiencyRate}%</div>
          <div class="stat-label">業務効率化</div>
          <div class="stat-description">月間業務時間の削減率</div>
        </div>
        <div class="stat-card">
          <div class="stat-value">{annualHoursSaved}時間{remainingMinutes}分</div>
          <div class="stat-label">年間削減時間</div>
          <div class="stat-description">1人あたりの年間削減時間</div>
        </div>
      </div>
    </section>

    <section class="benefits-grid">
      <h2>メリット</h2>
      <div class="benefit-card">
        <h3>業務効率化</h3>
        <p>ケアプランデータ連携システムの導入により、業務時間が削減され、業務効率が向上します。</p>
      </div>
      <div class="benefit-card">
        <h3>経済的メリット</h3>
        <p>業務時間の削減により、人件費が削減され、経済的メリットが得られます。</p>
      </div>
      <div class="benefit-card">
        <h3>データの可視化</h3>
        <p>ケアプランデータを可視化することで、業務の状況を把握しやすくなります。</p>
      </div>
    </section>

    <section class="data-section">
      <h2>データ</h2>
      <div class="data-content">
        <div class="data-text">
          <p>ケアプランデータ連携システムの導入により、業務時間が削減され、業務効率が向上します。</p>
        </div>
        <div class="data-visual">
          <div class="data-chart">
            <div class="chart-bar chart-before" style="height: {beforeAvgCreationTime}px;"></div>
            <div class="chart-bar chart-after" style="height: {afterAvgCreationTime}px;"></div>
            <div class="chart-label">1ヶ月あたりの提供票作成時間（分）</div>
            <div class="chart-title">提供票作成時間の変化</div>
          </div>
        </div>
      </div>
    </section>

    <section class="statistics-section">
      <h2>分析結果</h2>
      <div class="statistics-grid">
        <div class="statistic-card">
          <h3>総業務時間削減</h3>
          <p class="statistic-value" id="total-time-saved">{totalTimeSavedPerMonth}分/月</p>
        </div>
        <div class="statistic-card">
          <h3>業務効率化</h3>
          <p class="statistic-value" id="efficiency-rate">{efficiencyRate}%</p>
        </div>
        <div class="statistic-card">
          <h3>年間削減時間</h3>
          <p class="statistic-value" id="annual-time-saved">{annualHoursSaved}時間{remainingMinutes}分</p>
        </div>
      </div>
    </section>

    <section class="report-section">
      <h2>詳細レポート</h2>
      <div class="report-container">
        <div class="report-card">
          <h3>導入前後の業務時間比較</h3>
          <div class="report-content">
            <p>本レポートは宮崎県内の介護事業所におけるケアプランデータ連携システム導入前後の業務時間を比較したものです。</p>
            <p>調査期間: 2024年1月〜2024年3月</p>
            <p>対象事業所: 宮崎県内の介護事業所 20社</p>
          </div>
        </div>
      </div>
    </section>

  </main>
</Layout>

<script>
  // クライアントサイドでCSVデータが読み込まれた後に統計情報を更新する関数
  window.updateStatistics = function() {
    console.log('統計情報の更新を開始します...');
    
    // CSVデータが読み込まれているか確認
    if (!window.__csvDataCache) {
      console.log('CSVデータがまだ読み込まれていません');
      return;
    }
    
    // CSVファイル名を変数に格納
    const individualBeforeFile = 'individual_before.csv';
    const individualAfterFile = 'individual_after.csv';
    const businessBeforeFile = 'business_before.csv';
    const businessAfterFile = 'business_after.csv';
    
    // データを取得
    const individualBeforeData = window.__csvDataCache[individualBeforeFile];
    const individualAfterData = window.__csvDataCache[individualAfterFile];
    const businessBeforeData = window.__csvDataCache[businessBeforeFile];
    const businessAfterData = window.__csvDataCache[businessAfterFile];
    
    // すべてのCSVファイルが読み込まれているか確認
    if (!individualBeforeData || !individualAfterData || !businessBeforeData || !businessAfterData) {
      console.log('一部のCSVデータがまだ読み込まれていません');
      console.log('読み込み状況:', {
        '導入前個人データ': !!individualBeforeData,
        '導入後個人データ': !!individualAfterData,
        '導入前事業所データ': !!businessBeforeData,
        '導入後事業所データ': !!businessAfterData
      });
      
      // エラーメッセージを非表示にする
      const statusMessages = document.querySelectorAll('.statusMessage');
      if (statusMessages) {
        statusMessages.forEach(element => {
          element.style.display = 'none';
        });
      }
      
      // 5秒後に再試行
      setTimeout(window.updateStatistics, 5000);
      return;
    }
    
    // 主要な統計データを計算する関数
    const calculateAverageTime = (data, key) => {
      if (!data || data.length === 0) return 0;
      const sum = data.reduce((acc, row) => acc + (parseInt(row[key]) || 0), 0);
      return Math.round(sum / data.length);
    };
    
    // 統計データを計算
    const beforeAvgCreationTime = calculateAverageTime(individualBeforeData, '1ヶ月あたりの提供票作成時間（分）');
    const afterAvgCreationTime = calculateAverageTime(individualAfterData, '1ヶ月あたりの提供票作成時間（分）');
    const beforeAvgConfirmationTime = calculateAverageTime(individualBeforeData, '1ヶ月あたりの実績確認時間（分）');
    const afterAvgConfirmationTime = calculateAverageTime(individualAfterData, '1ヶ月あたりの実績確認時間（分）');
    const beforeAvgModificationTime = calculateAverageTime(individualBeforeData, '利用者からのケアプラン修正依頼を受けてから修正完了までに要する時間（分）');
    const afterAvgModificationTime = calculateAverageTime(individualAfterData, '利用者からのケアプラン修正依頼を受けてから修正完了までに要する時間（分）');
    
    // 削減時間の計算
    const totalTimeSavedPerMonth = (beforeAvgCreationTime - afterAvgCreationTime) + 
                                  (beforeAvgConfirmationTime - afterAvgConfirmationTime) + 
                                  (beforeAvgModificationTime - afterAvgModificationTime);
    
    // 削減率の計算
    const totalBeforeTime = beforeAvgCreationTime + beforeAvgConfirmationTime + beforeAvgModificationTime;
    const efficiencyRate = totalBeforeTime > 0 ? Math.round((totalTimeSavedPerMonth / totalBeforeTime) * 100) : 0;
    
    // 年間削減時間の計算
    const annualTimeSavedMinutes = totalTimeSavedPerMonth * 12;
    const annualHoursSaved = Math.floor(annualTimeSavedMinutes / 60);
    const remainingMinutes = annualTimeSavedMinutes % 60;
    
    console.log('計算結果:', {
      '導入前提供票作成時間': beforeAvgCreationTime,
      '導入後提供票作成時間': afterAvgCreationTime,
      '導入前実績確認時間': beforeAvgConfirmationTime,
      '導入後実績確認時間': afterAvgConfirmationTime,
      '導入前修正時間': beforeAvgModificationTime,
      '導入後修正時間': afterAvgModificationTime,
      '月間削減時間': totalTimeSavedPerMonth,
      '効率化率': efficiencyRate,
      '年間削減時間（時間）': annualHoursSaved,
      '年間削減時間（残り分）': remainingMinutes
    });
    
    // DOM要素を更新する関数
    const updateElement = (id, value) => {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = value;
        console.log(`${id}を${value}に更新しました`);
      } else {
        console.warn(`${id}要素が見つかりません`);
      }
    };
    
    // 統計情報の更新
    updateElement('total-time-saved', `${totalTimeSavedPerMonth}分/月`);
    updateElement('efficiency-rate', `${efficiencyRate}%`);
    updateElement('annual-time-saved', `${annualHoursSaved}時間${remainingMinutes}分`);
    
    // 既存の統計表示も更新（存在する場合）
    updateElement('totalTimeSaved', `${totalTimeSavedPerMonth}分/月`);
    updateElement('efficiencyRate', `${efficiencyRate}%`);
    updateElement('annualTimeSaved', `${annualHoursSaved}時間${remainingMinutes}分`);
    
    console.log('統計情報の更新が完了しました');
  };
  
  // ページ読み込み時にCSVデータを取得
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOMContentLoadedイベント発生: CSVデータの読み込みを開始します');
    
    // エラーメッセージを非表示にする
    const statusMessages = document.querySelectorAll('.statusMessage');
    if (statusMessages) {
      statusMessages.forEach(element => {
        element.style.display = 'none';
      });
    }
    
    // CSVデータが読み込まれたときのイベントリスナー
    window.addEventListener('csv-data-loaded', function(event) {
      console.log('CSVデータ読み込みイベント検知:', event.detail.fileName);
      
      // すべてのCSVファイルが読み込まれたかチェック
      const requiredFiles = [
        'individual_before.csv',
        'individual_after.csv',
        'business_before.csv',
        'business_after.csv'
      ];
      
      // 必要なファイルが全て読み込まれているか確認
      const allFilesLoaded = requiredFiles.every(file => 
        window.__csvDataCache && window.__csvDataCache[file]
      );
      
      // 統計情報を更新
      window.updateStatistics();
      
      // すべてのファイルが読み込まれたらコンソールに表示
      if (allFilesLoaded) {
        console.log('すべてのCSVファイルが読み込まれました');
      }
    });
    
    // 各CSVファイルを読み込む
    if (typeof getCsvData === 'function') {
      try {
        getCsvData('individual_before.csv');
        getCsvData('individual_after.csv');
        getCsvData('business_before.csv');
        getCsvData('business_after.csv');
      } catch (error) {
        console.error('CSVデータの読み込み中にエラーが発生しました:', error);
      }
    } else {
      console.error('getCsvData関数が見つかりません');
    }
    
    // 5秒後に統計情報を再度更新（非同期読み込みの完了を待つため）
    setTimeout(() => {
      console.log('タイムアウト後に統計情報を更新します');
      window.updateStatistics();
    }, 5000);
  });
</script>

<style>
  :root {
    --primary-color: #2c5282;
    --primary-light: #4299e1;
    --primary-dark: #1a365d;
    --secondary-color: #38b2ac;
    --secondary-light: #4fd1c5;
    --secondary-dark: #285e61;
    --accent-color: #ed8936;
    --accent-light: #f6ad55;
    --accent-dark: #c05621;
    --text-primary: #2d3748;
    --text-secondary: #4a5568;
    --text-light: #718096;
    --bg-primary: #ffffff;
    --bg-secondary: #f7fafc;
    --bg-accent: #ebf4ff;
    --border-color: #e2e8f0;
    --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    --border-radius: 8px;
    --transition: all 0.3s ease;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  /* ヒーローセクション */
  .hero {
    background-color: var(--bg-accent);
    padding: 3rem 0;
    margin-bottom: 2rem;
    text-align: center;
  }

  .hero h1 {
    color: var(--primary-dark);
    margin-bottom: 1rem;
    font-size: 2.2rem;
  }

  .hero .lead {
    font-size: 1.2rem;
    color: var(--text-secondary);
    max-width: 800px;
    margin: 0 auto;
  }

  /* カードスタイル */
  .card {
    background-color: var(--bg-primary);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    padding: 2rem;
    margin-bottom: 2rem;
  }

  /* 統計グリッド */
  .stats-grid, .statistics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-top: 1.5rem;
  }

  .stat-card, .statistic-card {
    background-color: var(--bg-secondary);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    text-align: center;
    transition: var(--transition);
  }

  .stat-card:hover, .statistic-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
  }

  .stat-value, .statistic-value {
    font-size: 2rem;
    font-weight: 700;
    color: var(--primary-color);
    margin-bottom: 0.5rem;
  }

  .stat-label {
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 0.5rem;
  }

  .stat-description {
    font-size: 0.9rem;
    color: var(--text-light);
  }

  /* 分析オプション */
  .options-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-top: 1.5rem;
  }

  .option-card {
    background-color: var(--bg-secondary);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    transition: var(--transition);
    cursor: pointer;
  }

  .option-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
    background-color: var(--primary-light);
    color: white;
  }

  .option-card h3 {
    font-size: 1.3rem;
    margin-bottom: 0.5rem;
  }

  /* サマリーセクション */
  .summary-section {
    padding: 2rem;
    background-color: var(--bg-primary);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    margin-bottom: 2rem;
  }

  .summary-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-top: 1.5rem;
  }

  /* メリットグリッド */
  .benefits-grid {
    padding: 2rem;
    background-color: var(--bg-primary);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    margin-bottom: 2rem;
  }

  .benefit-card {
    background-color: var(--bg-secondary);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    margin-top: 1.5rem;
    transition: var(--transition);
  }

  .benefit-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
  }

  .benefit-card h3 {
    color: var(--primary-color);
    margin-bottom: 0.5rem;
  }

  /* データセクション */
  .data-section {
    padding: 2rem;
    background-color: var(--bg-primary);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    margin-bottom: 2rem;
  }

  .data-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    margin-top: 1.5rem;
  }

  .data-chart {
    display: flex;
    align-items: flex-end;
    justify-content: center;
    height: 200px;
    position: relative;
  }

  .chart-bar {
    width: 60px;
    margin: 0 10px;
    border-radius: 4px 4px 0 0;
  }

  .chart-before {
    background-color: var(--primary-color);
  }

  .chart-after {
    background-color: var(--accent-color);
  }

  .chart-label {
    position: absolute;
    bottom: -30px;
    text-align: center;
    font-size: 0.8rem;
    color: var(--text-secondary);
    width: 100%;
  }

  .chart-title {
    position: absolute;
    bottom: -50px;
    text-align: center;
    font-weight: 600;
    color: var(--text-primary);
    width: 100%;
  }

  /* レポートセクション */
  .report-section {
    padding: 2rem;
    background-color: var(--bg-primary);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    margin-bottom: 2rem;
  }

  .report-container {
    margin-top: 1.5rem;
  }

  .report-card {
    background-color: var(--bg-secondary);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    margin-bottom: 1.5rem;
  }

  .report-card h3 {
    color: var(--primary-color);
    margin-bottom: 1rem;
  }

  .report-content p {
    margin-bottom: 0.5rem;
  }

  /* レスポンシブデザイン */
  @media (max-width: 768px) {
    .data-content {
      grid-template-columns: 1fr;
    }
    
    .hero h1 {
      font-size: 1.8rem;
    }
    
    .hero .lead {
      font-size: 1rem;
    }
    
    .stat-value, .statistic-value {
      font-size: 1.6rem;
    }
  }
</style>
