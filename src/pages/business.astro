---
import Layout from '../layouts/Layout.astro';
import AnalysisChart from '../components/AnalysisChart.astro';
import { getCsvData } from '../data/csvDataJson.js';

// 事業所データを読み込む
const businessBeforeData = getCsvData('business_before.csv');
const businessAfterData = getCsvData('business_after.csv');

// 平均時間を計算する関数
const calculateAverageTime = (data, key) => {
  if (!data || data.length === 0) return 0;
  const sum = data.reduce((acc, row) => acc + (parseInt(row[key]) || 0), 0);
  return Math.round(sum / data.length);
};

// 各指標の平均時間を計算
const beforeAvgCreationTime = calculateAverageTime(businessBeforeData, '1ヶ月あたりの提供票作成時間（分）');
const afterAvgCreationTime = calculateAverageTime(businessAfterData, '1ヶ月あたりの提供票作成時間（分）');
const beforeAvgConfirmationTime = calculateAverageTime(businessBeforeData, '1ヶ月あたりの実績確認時間（分）');
const afterAvgConfirmationTime = calculateAverageTime(businessAfterData, '1ヶ月あたりの実績確認時間（分）');
const beforeAvgModificationTime = calculateAverageTime(businessBeforeData, '利用者からのケアプラン修正依頼を受けてから修正完了までに要する時間（分）');
const afterAvgModificationTime = calculateAverageTime(businessAfterData, '利用者からのケアプラン修正依頼を受けてから修正完了までに要する時間（分）');

// 削減時間の計算
const creationTimeReduction = beforeAvgCreationTime - afterAvgCreationTime;
const creationTimeReductionPercent = beforeAvgCreationTime > 0 ? Math.round((creationTimeReduction / beforeAvgCreationTime) * 100) : 0;

const confirmationTimeReduction = beforeAvgConfirmationTime - afterAvgConfirmationTime;
const confirmationTimeReductionPercent = beforeAvgConfirmationTime > 0 ? Math.round((confirmationTimeReduction / beforeAvgConfirmationTime) * 100) : 0;

const modificationTimeReduction = beforeAvgModificationTime - afterAvgModificationTime;
const modificationTimeReductionPercent = beforeAvgModificationTime > 0 ? Math.round((modificationTimeReduction / beforeAvgModificationTime) * 100) : 0;

// 総合的な時間削減効果（月間）
const totalMonthlyTimeSaved = creationTimeReduction + confirmationTimeReduction + modificationTimeReduction;
const totalBeforeTime = beforeAvgCreationTime + beforeAvgConfirmationTime + beforeAvgModificationTime;
const totalTimeReductionPercent = totalBeforeTime > 0 ? Math.round((totalMonthlyTimeSaved / totalBeforeTime) * 100) : 0;

// 年間削減時間を計算
const annualTimeSaved = totalMonthlyTimeSaved * 12;
const annualHours = Math.floor(annualTimeSaved / 60);
const annualMinutes = annualTimeSaved % 60;

// 事業所規模ごとの平均時間を計算
const calculateAverageTimesByScale = (data) => {
  if (!data || data.length === 0) return {};
  
  const scales = [...new Set(data.map(row => row['事業所規模']))].filter(Boolean);
  const result = {};
  
  scales.forEach(scale => {
    const filteredData = data.filter(row => row['事業所規模'] === scale);
    if (filteredData.length === 0) return;
    
    const creationSum = filteredData.reduce((sum, row) => sum + (parseInt(row['1ヶ月あたりの提供票作成時間（分）']) || 0), 0);
    const confirmationSum = filteredData.reduce((sum, row) => sum + (parseInt(row['1ヶ月あたりの実績確認時間（分）']) || 0), 0);
    
    result[scale] = {
      creation: Math.round(creationSum / filteredData.length),
      confirmation: Math.round(confirmationSum / filteredData.length),
      count: filteredData.length
    };
  });
  
  return result;
};

const beforeScaleTimes = calculateAverageTimesByScale(businessBeforeData);
const afterScaleTimes = calculateAverageTimesByScale(businessAfterData);

---

<Layout title="事業所分析 | 宮崎県ケアプランデータ連携システム導入効果分析">
  <main class="container">
    <section class="page-header">
      <div class="header-content">
        <h1>事業所レベルでの導入効果分析</h1>
        <p class="lead">
          ケアプランデータ連携システムの導入による事業所全体の業務効率化と経済効果を分析し、組織としての導入メリットを可視化しています。
        </p>
        <div class="header-decoration">
          <div class="decoration-circle"></div>
          <div class="decoration-line"></div>
        </div>
      </div>
    </section>

    <section class="key-findings card">
      <h2><span class="icon">📊</span>主要な分析結果</h2>
      
      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-icon">⏱️</div>
          <div class="stat-value">{annualHours}時間{annualMinutes}分</div>
          <div class="stat-label">年間総削減時間</div>
          <div class="stat-description">事業所全体での年間削減時間</div>
        </div>
        
        <div class="stat-card">
          <div class="stat-icon">💹</div>
          <div class="stat-value">{new Intl.NumberFormat('ja-JP').format(annualTimeSaved * 2000)}円</div>
          <div class="stat-label">年間人件費削減</div>
          <div class="stat-description">時給2,000円換算</div>
        </div>
        
        <div class="stat-card">
          <div class="stat-icon">📈</div>
          <div class="stat-value">{totalTimeReductionPercent}%</div>
          <div class="stat-label">総合的な時間削減率</div>
          <div class="stat-description">月間削減時間の合計</div>
        </div>
      </div>
    </section>

    <section class="time-comparison card">
      <h2><span class="icon">⏳</span>業務別時間比較</h2>
      
      <div class="comparison-table">
        <table>
          <thead>
            <tr>
              <th>業務内容</th>
              <th>導入前</th>
              <th>導入後</th>
              <th>削減時間</th>
              <th>削減率</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td><span class="task-icon">📝</span> 提供票作成</td>
              <td>{beforeAvgCreationTime}分</td>
              <td>{afterAvgCreationTime}分</td>
              <td>{creationTimeReduction}分</td>
              <td><span class="badge badge-success">{creationTimeReductionPercent}%</span></td>
            </tr>
            <tr>
              <td><span class="task-icon">🔍</span> 実績確認</td>
              <td>{beforeAvgConfirmationTime}分</td>
              <td>{afterAvgConfirmationTime}分</td>
              <td>{confirmationTimeReduction}分</td>
              <td><span class="badge badge-success">{confirmationTimeReductionPercent}%</span></td>
            </tr>
            <tr>
              <td><span class="task-icon">✏️</span> 修正対応</td>
              <td>{beforeAvgModificationTime}分</td>
              <td>{afterAvgModificationTime}分</td>
              <td>{modificationTimeReduction}分</td>
              <td><span class="badge badge-success">{modificationTimeReductionPercent}%</span></td>
            </tr>
            <tr class="total-row">
              <td><span class="task-icon">🔄</span> 合計時間</td>
              <td>{totalBeforeTime}分</td>
              <td>{totalBeforeTime - totalMonthlyTimeSaved}分</td>
              <td>{totalMonthlyTimeSaved}分</td>
              <td><span class="badge badge-success">{totalTimeReductionPercent}%</span></td>
            </tr>
          </tbody>
        </table>
      </div>
      
      <div class="data-insights">
        <div class="insight-card">
          <div class="insight-icon">💡</div>
          <div class="insight-content">
            <h3>分析ポイント</h3>
            <p>システム導入により、提供票作成と実績確認の両方で大幅な時間削減が実現しています。特に修正対応時間の短縮は、情報共有の迅速化によるものです。</p>
          </div>
        </div>
      </div>
    </section>

    <section class="chart-section card">
      <h2><span class="icon">📊</span>共有方法別の時間比較</h2>
      <div class="chart-grid">
        <div class="chart-container">
          <AnalysisChart 
            title="導入前：共有方法別平均時間" 
            type="sharingMethod"
            data={businessBeforeData}
          />
        </div>
        <div class="chart-container">
          <AnalysisChart 
            title="導入後：共有方法別平均時間" 
            type="sharingMethod"
            data={businessAfterData}
          />
        </div>
      </div>
      
      <div class="chart-insights">
        <h3>分析結果のポイント</h3>
        <ul>
          <li><strong>システム導入効果：</strong> システムによる共有方法が最も効率的で、事業所全体での業務時間削減に大きく貢献しています。</li>
          <li><strong>コスト削減効果：</strong> 業務時間の削減は直接的な人件費削減につながり、年間約{new Intl.NumberFormat('ja-JP').format(annualTimeSaved * 2000)}円の経済効果が見込まれます。</li>
        </ul>
      </div>
    </section>

    <section class="chart-section card">
      <h2><span class="icon">📊</span>事業所規模別の時間比較</h2>
      <div class="chart-grid">
        <div class="chart-container">
          <AnalysisChart 
            title="導入前：事業所規模別平均時間" 
            type="businessScale"
            data={businessBeforeData}
          />
        </div>
        <div class="chart-container">
          <AnalysisChart 
            title="導入後：事業所規模別平均時間" 
            type="businessScale"
            data={businessAfterData}
          />
        </div>
      </div>
      
      <div class="chart-insights">
        <h3>事業所規模別の分析ポイント</h3>
        <ul>
          <li><strong>規模別の効果差：</strong> 事業所規模によって導入効果に差があり、特に中規模事業所での時間削減効果が顕著です。</li>
          <li><strong>大規模事業所の効率化：</strong> 利用者数の多い大規模事業所では、システム導入による情報共有の効率化がより大きな効果をもたらしています。</li>
        </ul>
      </div>
    </section>

    <section class="roi-analysis card">
      <h2><span class="icon">💰</span>投資対効果（ROI）分析</h2>
      <div class="roi-content">
        <div class="roi-intro">
          <p>
            ケアプランデータ連携システムの導入による投資対効果を分析しました。
          </p>
        </div>
        
        <div class="roi-grid">
          <div class="roi-item">
            <div class="roi-item-header">
              <div class="roi-icon">🔧</div>
              <h3>初期投資コスト</h3>
            </div>
            <ul>
              <li>システム導入費用</li>
              <li>研修・教育費用</li>
              <li>移行期間の業務調整コスト</li>
            </ul>
          </div>
          
          <div class="roi-item">
            <div class="roi-item-header">
              <div class="roi-icon">⏱️</div>
              <h3>継続的コスト</h3>
            </div>
            <ul>
              <li>システム利用料（月額/年額）</li>
              <li>保守・メンテナンス費用</li>
              <li>定期的な研修費用</li>
            </ul>
          </div>
          
          <div class="roi-item">
            <div class="roi-item-header">
              <div class="roi-icon">💹</div>
              <h3>経済的メリット</h3>
            </div>
            <ul>
              <li>年間人件費削減：約{new Intl.NumberFormat('ja-JP').format(annualTimeSaved * 2000)}円</li>
              <li>紙資源・印刷コスト削減</li>
              <li>保管スペース削減</li>
            </ul>
          </div>
          
          <div class="roi-item">
            <div class="roi-item-header">
              <div class="roi-icon">✨</div>
              <h3>非経済的メリット</h3>
            </div>
            <ul>
              <li>情報共有の正確性向上</li>
              <li>利用者サービスの質向上</li>
              <li>スタッフの業務満足度向上</li>
            </ul>
          </div>
        </div>
        
        <div class="roi-summary">
          <div class="roi-summary-item">
            <div class="roi-summary-icon">⏳</div>
            <div class="roi-summary-content">
              <p>
                <strong>投資回収期間：</strong> 導入コストと年間削減額を考慮すると、約1〜2年での投資回収が見込まれます。
              </p>
            </div>
          </div>
          <div class="roi-summary-item">
            <div class="roi-summary-icon">📈</div>
            <div class="roi-summary-content">
              <p>
                <strong>5年間の累積効果：</strong> 5年間での累積経済効果は約{new Intl.NumberFormat('ja-JP').format(annualTimeSaved * 2000 * 5)}円と試算されます。
              </p>
            </div>
          </div>
        </div>
      </div>
    </section>

    <section class="recommendations card">
      <h2><span class="icon">💡</span>事業所向け推奨事項</h2>
      <div class="recommendations-content">
        <ol class="recommendation-list">
          <li class="recommendation-item">
            <div class="recommendation-number">1</div>
            <div class="recommendation-content">
              <strong>段階的な導入計画の策定：</strong> 
              システム導入率をさらに高めるため、部門ごとに段階的な導入計画を策定し、成功事例を組織内で共有することが効果的です。
            </div>
          </li>
          <li class="recommendation-item">
            <div class="recommendation-number">2</div>
            <div class="recommendation-content">
              <strong>定期的な効果測定：</strong> 
              四半期ごとに業務時間の測定を行い、システム導入効果を継続的に検証・改善することで、さらなる効率化が期待できます。
            </div>
          </li>
          <li class="recommendation-item">
            <div class="recommendation-number">3</div>
            <div class="recommendation-content">
              <strong>業務プロセスの最適化：</strong> 
              システム導入に合わせて業務プロセス全体を見直し、重複作業の削減や情報共有の効率化を図ることが重要です。
            </div>
          </li>
          <li class="recommendation-item">
            <div class="recommendation-number">4</div>
            <div class="recommendation-content">
              <strong>他システムとの連携強化：</strong> 
              既存の業務システムとの連携を強化することで、データ入力の重複を避け、さらなる業務効率化を実現できます。
            </div>
          </li>
        </ol>
      </div>
    </section>

    <section class="navigation-links">
      <div class="nav-buttons">
        <a href="/" class="btn btn-primary">トップページに戻る</a>
        <a href="/individual/" class="btn btn-secondary">個人分析を見る</a>
      </div>
    </section>
  </main>
</Layout>

<script>
  // クライアントサイドでCSVデータが読み込まれた後に統計情報を更新する関数
  function updateBusinessStatistics() {
    console.log('事業所分析の統計情報の更新を開始します...');
    
    // CSVデータが読み込まれているか確認
    if (!window.__csvDataCache) {
      console.log('CSVデータがまだ読み込まれていません');
      return;
    }
    
    const businessBeforeData = window.__csvDataCache['business_before.csv'];
    const businessAfterData = window.__csvDataCache['business_after.csv'];
    
    if (!businessBeforeData || !businessAfterData) {
      console.log('必要なCSVデータが見つかりません');
      return;
    }
    
    console.log(`データ件数: 導入前=${businessBeforeData.length}件, 導入後=${businessAfterData.length}件`);
    
    // 平均時間を計算する関数
    const calculateAverageTime = (data, key) => {
      if (!data || data.length === 0) return 0;
      const sum = data.reduce((acc, row) => acc + (parseInt(row[key]) || 0), 0);
      return Math.round(sum / data.length);
    };
    
    // 各指標の平均時間を計算
    const beforeAvgCreationTime = calculateAverageTime(businessBeforeData, '1ヶ月あたりの提供票作成時間（分）');
    const afterAvgCreationTime = calculateAverageTime(businessAfterData, '1ヶ月あたりの提供票作成時間（分）');
    const beforeAvgConfirmationTime = calculateAverageTime(businessBeforeData, '1ヶ月あたりの実績確認時間（分）');
    const afterAvgConfirmationTime = calculateAverageTime(businessAfterData, '1ヶ月あたりの実績確認時間（分）');
    const beforeAvgModificationTime = calculateAverageTime(businessBeforeData, '利用者からのケアプラン修正依頼を受けてから修正完了までに要する時間（分）');
    const afterAvgModificationTime = calculateAverageTime(businessAfterData, '利用者からのケアプラン修正依頼を受けてから修正完了までに要する時間（分）');
    
    // 削減時間の計算
    const creationTimeReduction = beforeAvgCreationTime - afterAvgCreationTime;
    const creationTimeReductionPercent = beforeAvgCreationTime > 0 ? Math.round((creationTimeReduction / beforeAvgCreationTime) * 100) : 0;
    
    const confirmationTimeReduction = beforeAvgConfirmationTime - afterAvgConfirmationTime;
    const confirmationTimeReductionPercent = beforeAvgConfirmationTime > 0 ? Math.round((confirmationTimeReduction / beforeAvgConfirmationTime) * 100) : 0;
    
    const modificationTimeReduction = beforeAvgModificationTime - afterAvgModificationTime;
    const modificationTimeReductionPercent = beforeAvgModificationTime > 0 ? Math.round((modificationTimeReduction / beforeAvgModificationTime) * 100) : 0;
    
    // 総合的な時間削減効果（月間）
    const totalMonthlyTimeSaved = creationTimeReduction + confirmationTimeReduction + modificationTimeReduction;
    const totalBeforeTime = beforeAvgCreationTime + beforeAvgConfirmationTime + beforeAvgModificationTime;
    const totalTimeReductionPercent = totalBeforeTime > 0 ? Math.round((totalMonthlyTimeSaved / totalBeforeTime) * 100) : 0;
    
    // 年間削減時間を計算
    const annualTimeSaved = totalMonthlyTimeSaved * 12;
    const annualHours = Math.floor(annualTimeSaved / 60);
    const annualMinutes = annualTimeSaved % 60;
    
    // 事業所規模ごとの平均時間を計算
    const calculateAverageTimesByScale = (data) => {
      if (!data || data.length === 0) return {};
      
      const scales = [...new Set(data.map(row => row['事業所規模']))].filter(Boolean);
      const result = {};
      
      scales.forEach(scale => {
        const filteredData = data.filter(row => row['事業所規模'] === scale);
        if (filteredData.length === 0) return;
        
        const creationSum = filteredData.reduce((sum, row) => sum + (parseInt(row['1ヶ月あたりの提供票作成時間（分）']) || 0), 0);
        const confirmationSum = filteredData.reduce((sum, row) => sum + (parseInt(row['1ヶ月あたりの実績確認時間（分）']) || 0), 0);
        
        result[scale] = {
          creation: Math.round(creationSum / filteredData.length),
          confirmation: Math.round(confirmationSum / filteredData.length),
          count: filteredData.length
        };
      });
      
      return result;
    };
    
    // 統計情報の更新
    // 主要な分析結果セクションの更新
    const statValues = document.querySelectorAll('.stat-value');
    if (statValues.length >= 3) {
      // 総業務時間削減
      statValues[0].textContent = `${annualHours}時間${annualMinutes}分`;
      
      // 年間人件費削減
      statValues[1].textContent = `${new Intl.NumberFormat('ja-JP').format(annualTimeSaved * 2000)}円`;
      
      // 総合的な時間削減率
      statValues[2].textContent = `${totalTimeReductionPercent}%`;
    }
    
    // 業務別時間比較テーブルの更新
    const tableRows = document.querySelectorAll('.comparison-table tbody tr');
    if (tableRows.length >= 4) {
      // 提供票作成時間の行
      const creationRow = tableRows[0];
      if (creationRow) {
        creationRow.children[1].textContent = `${beforeAvgCreationTime}分`;
        creationRow.children[2].textContent = `${afterAvgCreationTime}分`;
        creationRow.children[3].textContent = `${creationTimeReduction}分`;
        creationRow.children[4].querySelector('.badge').textContent = `${creationTimeReductionPercent}%`;
      }
      
      // 実績確認時間の行
      const confirmationRow = tableRows[1];
      if (confirmationRow) {
        confirmationRow.children[1].textContent = `${beforeAvgConfirmationTime}分`;
        confirmationRow.children[2].textContent = `${afterAvgConfirmationTime}分`;
        confirmationRow.children[3].textContent = `${confirmationTimeReduction}分`;
        confirmationRow.children[4].querySelector('.badge').textContent = `${confirmationTimeReductionPercent}%`;
      }
      
      // 修正対応時間の行
      const modificationRow = tableRows[2];
      if (modificationRow) {
        modificationRow.children[1].textContent = `${beforeAvgModificationTime}分`;
        modificationRow.children[2].textContent = `${afterAvgModificationTime}分`;
        modificationRow.children[3].textContent = `${modificationTimeReduction}分`;
        modificationRow.children[4].querySelector('.badge').textContent = `${modificationTimeReductionPercent}%`;
      }
      
      // 合計時間の行
      const totalRow = tableRows[3];
      if (totalRow) {
        totalRow.children[1].textContent = `${totalBeforeTime}分`;
        totalRow.children[2].textContent = `${totalBeforeTime - totalMonthlyTimeSaved}分`;
        totalRow.children[3].textContent = `${totalMonthlyTimeSaved}分`;
        totalRow.children[4].querySelector('.badge').textContent = `${totalTimeReductionPercent}%`;
      }
    }
    
    // CSVデータ読み込み完了イベントを発火
    // このイベントにより、AnalysisChartコンポーネントが更新される
    window.dispatchEvent(new CustomEvent('csv-data-loaded', {
      detail: {
        fileName: 'business_before.csv',
        data: businessBeforeData
      }
    }));
    
    window.dispatchEvent(new CustomEvent('csv-data-loaded', {
      detail: {
        fileName: 'business_after.csv',
        data: businessAfterData
      }
    }));
    
    console.log('事業所分析の統計情報の更新が完了しました');
  }
  
  // ページ読み込み時にCSVデータを取得
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOMContentLoadedイベント発生: CSVデータの読み込みを開始します');
    
    // bodyにクラスを追加して、このページが事業所分析ページであることを示す
    document.querySelector('body').classList.add('business-page');
    
    // CSVデータが既に読み込まれている場合は統計情報を更新
    if (window.__csvDataCache) {
      updateBusinessStatistics();
    }
    
    // CSVデータ読み込みイベントのリスナー
    window.addEventListener('csv-data-loaded', function(event) {
      console.log('CSVデータ読み込みイベント検知:', event.detail.fileName);
      updateBusinessStatistics();
    });
  });
</script>

<style>
  .page-header {
    text-align: center;
    margin-bottom: 2rem;
    position: relative;
  }
  
  .header-content {
    position: relative;
    z-index: 2;
  }
  
  .header-decoration {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 1;
    overflow: hidden;
  }
  
  .decoration-circle {
    position: absolute;
    width: 300px;
    height: 300px;
    border-radius: 50%;
    background-color: rgba(66, 153, 225, 0.1);
    top: -150px;
    right: -150px;
  }
  
  .decoration-line {
    position: absolute;
    width: 100%;
    height: 3px;
    background: linear-gradient(90deg, transparent, rgba(66, 153, 225, 0.2), transparent);
    bottom: 0;
  }
  
  h1 {
    font-size: 2.5rem;
    font-weight: 700;
    color: #2d3748;
    margin-bottom: 1rem;
  }
  
  .lead {
    font-size: 1.25rem;
    color: #4a5568;
    max-width: 800px;
    margin: 0 auto;
  }
  
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }
  
  .card {
    background-color: white;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: 1.5rem;
    margin-bottom: 2rem;
  }
  
  h2 {
    font-size: 1.5rem;
    font-weight: 600;
    color: #2d3748;
    margin-bottom: 1.5rem;
    display: flex;
    align-items: center;
  }
  
  .icon {
    margin-right: 0.5rem;
  }
  
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
  }
  
  .stat-card {
    background-color: #f7fafc;
    border-radius: 0.5rem;
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    transition: transform 0.3s ease;
  }
  
  .stat-card:hover {
    transform: translateY(-5px);
  }
  
  .stat-icon {
    font-size: 2rem;
    margin-bottom: 0.5rem;
  }
  
  .stat-value {
    font-size: 2rem;
    font-weight: 700;
    color: #3182ce;
    margin-bottom: 0.5rem;
  }
  
  .stat-label {
    font-size: 1rem;
    font-weight: 600;
    color: #4a5568;
    margin-bottom: 0.5rem;
  }
  
  .stat-description {
    font-size: 0.875rem;
    color: #718096;
  }
  
  .comparison-table {
    overflow-x: auto;
  }
  
  table {
    width: 100%;
    border-collapse: collapse;
  }
  
  th, td {
    padding: 0.75rem 1rem;
    text-align: left;
    border-bottom: 1px solid #e2e8f0;
  }
  
  th {
    background-color: #f7fafc;
    font-weight: 600;
    color: #4a5568;
  }
  
  .task-icon {
    margin-right: 0.5rem;
  }
  
  .badge {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 600;
  }
  
  .badge-success {
    background-color: #c6f6d5;
    color: #2f855a;
  }
  
  .total-row {
    font-weight: 600;
    background-color: #f7fafc;
  }
  
  .chart-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  @media (min-width: 768px) {
    .chart-grid {
      grid-template-columns: 1fr 1fr;
    }
  }
  
  .chart-container {
    background-color: #f7fafc;
    border-radius: 0.5rem;
    padding: 1rem;
    height: 350px;
  }
  
  .chart-insights {
    background-color: #f7fafc;
    border-radius: 0.5rem;
    padding: 1.5rem;
  }
  
  .chart-insights h3 {
    font-size: 1.25rem;
    font-weight: 600;
    color: #2d3748;
    margin-bottom: 1rem;
  }
  
  .chart-insights ul {
    padding-left: 1.5rem;
  }
  
  .chart-insights li {
    margin-bottom: 0.5rem;
  }
  
  .data-insights {
    margin-top: 1.5rem;
  }
  
  .insight-card {
    background-color: #ebf8ff;
    border-radius: 0.5rem;
    padding: 1.5rem;
    display: flex;
    align-items: flex-start;
  }
  
  .insight-icon {
    font-size: 2rem;
    margin-right: 1rem;
  }
  
  .insight-content {
    flex: 1;
  }
  
  .insight-content h3 {
    font-size: 1.25rem;
    font-weight: 600;
    color: #2c5282;
    margin-bottom: 0.5rem;
  }
  
  .insight-content p {
    color: #4a5568;
    margin: 0;
  }
  
  .roi-content {
    margin-bottom: 1.5rem;
  }
  
  .roi-summary {
    background-color: #f7fafc;
    border-radius: 0.5rem;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  .roi-summary-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #2d3748;
    margin-bottom: 1rem;
  }
  
  .roi-summary-content {
    color: #4a5568;
  }
  
  .roi-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-top: 1.5rem;
  }
  
  .roi-card {
    background-color: #f7fafc;
    border-radius: 0.5rem;
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
  }
  
  .roi-card-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: #2d3748;
    margin-bottom: 1rem;
  }
  
  .roi-card-content {
    flex: 1;
    color: #4a5568;
  }
  
  .roi-card-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: #3182ce;
    margin-top: 1rem;
  }
  
  .benefits-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
  }
  
  .benefit-card {
    background-color: #f7fafc;
    border-radius: 0.5rem;
    padding: 1.5rem;
  }
  
  .benefit-card h3 {
    font-size: 1.25rem;
    font-weight: 600;
    color: #2d3748;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
  }
  
  .benefit-card-icon {
    margin-right: 0.5rem;
  }
  
  .benefit-card ul {
    padding-left: 1.5rem;
    margin-bottom: 0;
  }
  
  .benefit-card li {
    margin-bottom: 0.5rem;
  }
  
  .recommendation-list {
    counter-reset: recommendation-counter;
    list-style: none;
    padding: 0;
  }
  
  .recommendation-item {
    position: relative;
    padding-left: 3rem;
    margin-bottom: 1.5rem;
  }
  
  .recommendation-item::before {
    counter-increment: recommendation-counter;
    content: counter(recommendation-counter);
    position: absolute;
    left: 0;
    top: 0;
    width: 2rem;
    height: 2rem;
    background-color: #3182ce;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
  }
  
  .recommendation-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: #2d3748;
    margin-bottom: 0.5rem;
  }
  
  .recommendation-content {
    color: #4a5568;
  }
  
  .navigation-links {
    margin-top: 3rem;
    margin-bottom: 2rem;
  }
  
  .nav-buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
  }
  
  .btn {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    font-weight: 600;
    text-align: center;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .btn-primary {
    background-color: #3182ce;
    color: white;
    border: 2px solid #3182ce;
  }
  
  .btn-primary:hover {
    background-color: transparent;
    color: #3182ce;
  }
  
  .btn-secondary {
    background-color: transparent;
    color: #3182ce;
    border: 2px solid #3182ce;
  }
  
  .btn-secondary:hover {
    background-color: #3182ce;
    color: white;
  }
  
  @media (max-width: 768px) {
    .nav-buttons {
      flex-direction: column;
      align-items: center;
    }
    
    .stat-value {
      font-size: 1.75rem;
    }
    
    table {
      font-size: 0.875rem;
    }
    
    th, td {
      padding: 0.5rem;
    }
    
    .roi-grid {
      grid-template-columns: 1fr;
    }

    .recommendation-item {
      flex-direction: column;
    }

    .recommendation-number {
      margin-bottom: 1rem;
    }
  }
</style>
