---
import Layout from '../layouts/Layout.astro';
import AnalysisChart from '../components/AnalysisChart.astro';
import { getCsvData } from '../data/csvDataJson.js';

// 個人データを読み込む
const individualBeforeData = getCsvData('individual_before.csv');
const individualAfterData = getCsvData('individual_after.csv');

// 平均時間を計算する関数
const calculateAverageTime = (data, key) => {
  if (!data || data.length === 0) return 0;
  const sum = data.reduce((acc, row) => acc + (parseInt(row[key]) || 0), 0);
  return Math.round(sum / data.length);
};

// 各指標の平均時間を計算
const beforeAvgCreationTime = calculateAverageTime(individualBeforeData, '1ヶ月あたりの提供票作成時間（分）');
const afterAvgCreationTime = calculateAverageTime(individualAfterData, '1ヶ月あたりの提供票作成時間（分）');
const beforeAvgConfirmationTime = calculateAverageTime(individualBeforeData, '1ヶ月あたりの実績確認時間（分）');
const afterAvgConfirmationTime = calculateAverageTime(individualAfterData, '1ヶ月あたりの実績確認時間（分）');

// 削減時間の計算
const creationTimeReduction = beforeAvgCreationTime - afterAvgCreationTime;
const creationTimeReductionPercent = beforeAvgCreationTime > 0 ? Math.round((creationTimeReduction / beforeAvgCreationTime) * 100) : 0;

const confirmationTimeReduction = beforeAvgConfirmationTime - afterAvgConfirmationTime;
const confirmationTimeReductionPercent = beforeAvgConfirmationTime > 0 ? Math.round((confirmationTimeReduction / beforeAvgConfirmationTime) * 100) : 0;

// 総合的な時間削減効果（月間）
const totalMonthlyTimeSaved = creationTimeReduction + confirmationTimeReduction;
const totalBeforeTime = beforeAvgCreationTime + beforeAvgConfirmationTime;
const totalTimeReductionPercent = totalBeforeTime > 0 ? Math.round((totalMonthlyTimeSaved / totalBeforeTime) * 100) : 0;

// 年間削減時間を計算
const annualTimeSaved = totalMonthlyTimeSaved * 12;
const annualHours = Math.floor(annualTimeSaved / 60);
const annualMinutes = annualTimeSaved % 60;
---

<Layout title="個人分析 | 宮崎県ケアプランデータ連携システム導入効果分析">
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8 text-center">個人レベルでの導入効果分析</h1>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
      <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold mb-4">導入前後の比較</h2>
        <div class="stats-grid">
          <div class="stat-item">
            <h3>提供票作成時間</h3>
            <p class="before" id="beforeCreationTime">{beforeAvgCreationTime}分/月</p>
            <p class="after" id="afterCreationTime">{afterAvgCreationTime}分/月</p>
            <p class="reduction" id="creationTimeReduction">
              {creationTimeReduction}分削減
              ({creationTimeReductionPercent}%)
            </p>
          </div>
          
          <div class="stat-item">
            <h3>実績確認時間</h3>
            <p class="before" id="beforeConfirmationTime">{beforeAvgConfirmationTime}分/月</p>
            <p class="after" id="afterConfirmationTime">{afterAvgConfirmationTime}分/月</p>
            <p class="reduction" id="confirmationTimeReduction">
              {confirmationTimeReduction}分削減
              ({confirmationTimeReductionPercent}%)
            </p>
          </div>
          
          <div class="stat-item">
            <h3>合計時間</h3>
            <p class="before" id="beforeTotalTime">{totalBeforeTime}分/月</p>
            <p class="after" id="afterTotalTime">{totalBeforeTime - totalMonthlyTimeSaved}分/月</p>
            <p class="reduction" id="totalTimeReduction">
              {totalMonthlyTimeSaved}分削減 ({totalTimeReductionPercent}%)
            </p>
          </div>
        </div>
      </div>
      
      <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold mb-4">年間削減効果</h2>
        <div class="annual-savings">
          <div class="time-saved">
            <h3>年間時間削減</h3>
            <p class="highlight" id="annualTimeSaved">{annualHours}時間{annualMinutes}分/年</p>
          </div>
          
          <div class="money-saved">
            <h3>年間人件費削減</h3>
            <p class="highlight" id="annualMoneySaved">{Math.round(annualTimeSaved * 2000).toLocaleString()}円/年</p>
            <p class="note">※時給2,000円換算</p>
          </div>
        </div>
      </div>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
      <div class="bg-white rounded-lg shadow-md p-6">
        <AnalysisChart 
          title="導入前：共有方法別平均時間" 
          type="sharingMethod"
          data={individualBeforeData}
        />
      </div>
      
      <div class="bg-white rounded-lg shadow-md p-6">
        <AnalysisChart 
          title="導入後：共有方法別平均時間" 
          type="sharingMethod"
          data={individualAfterData}
        />
      </div>
    </div>
    
    <div class="bg-white rounded-lg shadow-md p-6 mb-12">
      <h2 class="text-xl font-semibold mb-4">分析結果のポイント</h2>
      <div class="analysis-points">
        <div class="point">
          <h3>時間削減効果</h3>
          <p>システム導入により、提供票作成と実績確認の両方で大幅な時間削減が実現しています。特に提供票作成時間は{creationTimeReductionPercent}%削減され、業務効率が向上しています。</p>
        </div>
        
        <div class="point">
          <h3>共有方法の効率性</h3>
          <p>従来のFAXやメールによる共有方法と比較して、システムを利用した共有方法が最も効率的であることが示されています。特に実績確認時間において顕著な差が見られます。</p>
        </div>
        
        <div class="point">
          <h3>経済的効果</h3>
          <p>個人レベルでの年間削減時間は{annualHours}時間{annualMinutes}分となり、時給2,000円換算で年間約{Math.round(annualTimeSaved * 2000).toLocaleString()}円の人件費削減効果があります。</p>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // クライアントサイドでCSVデータが読み込まれた後に統計情報を更新する関数
  function updateIndividualStatistics() {
    console.log('個人分析の統計情報の更新を開始します...');
    
    // CSVデータが読み込まれているか確認
    if (!window.__csvDataCache) {
      console.log('CSVデータがまだ読み込まれていません');
      return;
    }
    
    const individualBeforeData = window.__csvDataCache['individual_before.csv'];
    const individualAfterData = window.__csvDataCache['individual_after.csv'];
    
    if (!individualBeforeData || !individualAfterData) {
      console.log('必要なCSVデータが見つかりません');
      return;
    }
    
    console.log(`データ件数: 導入前=${individualBeforeData.length}件, 導入後=${individualAfterData.length}件`);
    
    // 平均時間を計算する関数
    const calculateAverageTime = (data, key) => {
      if (!data || data.length === 0) return 0;
      const sum = data.reduce((acc, row) => acc + (parseInt(row[key]) || 0), 0);
      return Math.round(sum / data.length);
    };
    
    // 各指標の平均時間を計算
    const beforeAvgCreationTime = calculateAverageTime(individualBeforeData, '1ヶ月あたりの提供票作成時間（分）');
    const afterAvgCreationTime = calculateAverageTime(individualAfterData, '1ヶ月あたりの提供票作成時間（分）');
    const beforeAvgConfirmationTime = calculateAverageTime(individualBeforeData, '1ヶ月あたりの実績確認時間（分）');
    const afterAvgConfirmationTime = calculateAverageTime(individualAfterData, '1ヶ月あたりの実績確認時間（分）');
    
    // 削減時間の計算
    const creationTimeReduction = beforeAvgCreationTime - afterAvgCreationTime;
    const creationTimeReductionPercent = beforeAvgCreationTime > 0 ? Math.round((creationTimeReduction / beforeAvgCreationTime) * 100) : 0;
    
    const confirmationTimeReduction = beforeAvgConfirmationTime - afterAvgConfirmationTime;
    const confirmationTimeReductionPercent = beforeAvgConfirmationTime > 0 ? Math.round((confirmationTimeReduction / beforeAvgConfirmationTime) * 100) : 0;
    
    // 総合的な時間削減効果（月間）
    const totalMonthlyTimeSaved = creationTimeReduction + confirmationTimeReduction;
    const totalBeforeTime = beforeAvgCreationTime + beforeAvgConfirmationTime;
    const totalTimeReductionPercent = totalBeforeTime > 0 ? Math.round((totalMonthlyTimeSaved / totalBeforeTime) * 100) : 0;
    
    // 年間削減時間を計算
    const annualTimeSaved = totalMonthlyTimeSaved * 12;
    const annualHours = Math.floor(annualTimeSaved / 60);
    const annualMinutes = annualTimeSaved % 60;
    
    // 統計情報の更新
    document.getElementById('beforeCreationTime').textContent = `${beforeAvgCreationTime}分/月`;
    document.getElementById('afterCreationTime').textContent = `${afterAvgCreationTime}分/月`;
    document.getElementById('creationTimeReduction').textContent = `${creationTimeReduction}分削減 (${creationTimeReductionPercent}%)`;
    
    document.getElementById('beforeConfirmationTime').textContent = `${beforeAvgConfirmationTime}分/月`;
    document.getElementById('afterConfirmationTime').textContent = `${afterAvgConfirmationTime}分/月`;
    document.getElementById('confirmationTimeReduction').textContent = `${confirmationTimeReduction}分削減 (${confirmationTimeReductionPercent}%)`;
    
    document.getElementById('beforeTotalTime').textContent = `${totalBeforeTime}分/月`;
    document.getElementById('afterTotalTime').textContent = `${totalBeforeTime - totalMonthlyTimeSaved}分/月`;
    document.getElementById('totalTimeReduction').textContent = `${totalMonthlyTimeSaved}分削減 (${totalTimeReductionPercent}%)`;
    
    document.getElementById('annualTimeSaved').textContent = `${annualHours}時間${annualMinutes}分/年`;
    document.getElementById('annualMoneySaved').textContent = `${Math.round(annualTimeSaved * 2000).toLocaleString()}円/年`;
    
    // CSVデータ読み込み完了イベントを発火
    // このイベントにより、AnalysisChartコンポーネントが更新される
    window.dispatchEvent(new CustomEvent('csv-data-loaded', {
      detail: {
        fileName: 'individual_before.csv',
        data: individualBeforeData
      }
    }));
    
    window.dispatchEvent(new CustomEvent('csv-data-loaded', {
      detail: {
        fileName: 'individual_after.csv',
        data: individualAfterData
      }
    }));
    
    console.log('個人分析の統計情報の更新が完了しました');
  }
  
  // ページ読み込み時にCSVデータを取得
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOMContentLoadedイベント発生: CSVデータの読み込みを開始します');
    
    // bodyにクラスを追加して、このページが個人分析ページであることを示す
    document.querySelector('body').classList.add('individual-page');
    
    // CSVデータが既に読み込まれている場合は統計情報を更新
    if (window.__csvDataCache) {
      updateIndividualStatistics();
    }
    
    // CSVデータ読み込みイベントのリスナー
    window.addEventListener('csv-data-loaded', function(event) {
      console.log('CSVデータ読み込みイベント検知:', event.detail.fileName);
      updateIndividualStatistics();
    });
  });
</script>

<style>
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
  }
  
  .stat-item {
    background-color: #f8fafc;
    border-radius: 0.5rem;
    padding: 1rem;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }
  
  .stat-item h3 {
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: #4a5568;
  }
  
  .before {
    color: #718096;
    font-size: 0.9rem;
    margin-bottom: 0.25rem;
  }
  
  .after {
    color: #2b6cb0;
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 0.25rem;
  }
  
  .reduction {
    color: #2c7a7b;
    font-size: 0.9rem;
    font-weight: 600;
  }
  
  .annual-savings {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }
  
  @media (min-width: 640px) {
    .annual-savings {
      grid-template-columns: 1fr 1fr;
    }
  }
  
  .time-saved, .money-saved {
    background-color: #f8fafc;
    border-radius: 0.5rem;
    padding: 1.5rem;
    text-align: center;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }
  
  .time-saved h3, .money-saved h3 {
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    color: #4a5568;
  }
  
  .highlight {
    font-size: 1.5rem;
    font-weight: 700;
    color: #2b6cb0;
    margin-bottom: 0.25rem;
  }
  
  .note {
    font-size: 0.75rem;
    color: #718096;
  }
  
  .analysis-points {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }
  
  @media (min-width: 768px) {
    .analysis-points {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  
  .point {
    background-color: #f8fafc;
    border-radius: 0.5rem;
    padding: 1.5rem;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }
  
  .point h3 {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    color: #2b6cb0;
  }
  
  .point p {
    color: #4a5568;
    line-height: 1.5;
  }
</style>
