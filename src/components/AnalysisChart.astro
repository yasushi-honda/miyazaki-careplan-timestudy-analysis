---
const { 
  title, 
  type = 'sharingMethod',  // sharingMethod または businessScale
  data = []
} = Astro.props;

// チャートのデータを準備する関数
function prepareChartData(data, type) {
  if (!data || data.length === 0) {
    return {
      labels: [],
      datasets: []
    };
  }

  if (type === 'sharingMethod') {
    // 共有方法ごとの平均時間を計算
    const methods = ["FAX", "メール", "持参", "郵送", "システム", "その他"];
    const creationTimes = {};
    const confirmationTimes = {};
    const counts = {};
    
    methods.forEach(method => {
      creationTimes[method] = 0;
      confirmationTimes[method] = 0;
      counts[method] = 0;
    });
    
    data.forEach(row => {
      const method = row["ケアプラン共有方法"] || row["共有方法"];
      if (methods.includes(method)) {
        const creationTime = parseInt(row["1ヶ月あたりの提供票作成時間（分）"]) || 0;
        const confirmationTime = parseInt(row["1ヶ月あたりの実績確認時間（分）"]) || 0;
        
        creationTimes[method] += creationTime;
        confirmationTimes[method] += confirmationTime;
        counts[method]++;
      }
    });
    
    const labels = methods;
    const creationData = methods.map(method => 
      counts[method] > 0 ? Math.round(creationTimes[method] / counts[method]) : 0
    );
    const confirmationData = methods.map(method => 
      counts[method] > 0 ? Math.round(confirmationTimes[method] / counts[method]) : 0
    );
    
    return {
      labels,
      datasets: [
        {
          label: '提供票作成時間（分）',
          data: creationData,
          backgroundColor: 'rgba(54, 162, 235, 0.5)',
          borderColor: 'rgba(54, 162, 235, 1)',
          borderWidth: 1
        },
        {
          label: '実績確認時間（分）',
          data: confirmationData,
          backgroundColor: 'rgba(255, 99, 132, 0.5)',
          borderColor: 'rgba(255, 99, 132, 1)',
          borderWidth: 1
        }
      ]
    };
  } else if (type === 'businessScale') {
    // 事業所規模ごとの平均時間を計算
    const scales = [...new Set(data.map(row => row['事業所規模']))].filter(Boolean);
    const creationTimes = {};
    const confirmationTimes = {};
    const counts = {};
    
    scales.forEach(scale => {
      creationTimes[scale] = 0;
      confirmationTimes[scale] = 0;
      counts[scale] = 0;
    });
    
    data.forEach(row => {
      const scale = row['事業所規模'];
      if (scale && scales.includes(scale)) {
        const creationTime = parseInt(row["1ヶ月あたりの提供票作成時間（分）"]) || 0;
        const confirmationTime = parseInt(row["1ヶ月あたりの実績確認時間（分）"]) || 0;
        
        creationTimes[scale] += creationTime;
        confirmationTimes[scale] += confirmationTime;
        counts[scale]++;
      }
    });
    
    const labels = scales;
    const creationData = scales.map(scale => 
      counts[scale] > 0 ? Math.round(creationTimes[scale] / counts[scale]) : 0
    );
    const confirmationData = scales.map(scale => 
      counts[scale] > 0 ? Math.round(confirmationTimes[scale] / counts[scale]) : 0
    );
    
    return {
      labels,
      datasets: [
        {
          label: '提供票作成時間（分）',
          data: creationData,
          backgroundColor: 'rgba(54, 162, 235, 0.5)',
          borderColor: 'rgba(54, 162, 235, 1)',
          borderWidth: 1
        },
        {
          label: '実績確認時間（分）',
          data: confirmationData,
          backgroundColor: 'rgba(255, 99, 132, 0.5)',
          borderColor: 'rgba(255, 99, 132, 1)',
          borderWidth: 1
        }
      ]
    };
  }
  
  // デフォルトの空のデータを返す
  return {
    labels: [],
    datasets: []
  };
}

// チャートのオプションを設定
const chartOptions = {
  responsive: true,
  maintainAspectRatio: false,
  plugins: {
    legend: {
      position: 'top',
    },
    title: {
      display: true,
      text: title || '分析チャート'
    }
  },
  scales: {
    y: {
      beginAtZero: true,
      title: {
        display: true,
        text: '時間（分）'
      }
    }
  }
};

// チャートのIDを生成（ユニークにするため）
const chartId = `chart-${Math.random().toString(36).substring(2, 9)}`;

// チャートデータを準備（サーバーサイドでの初期値）
const initialChartData = prepareChartData(data, type);
---

<div class="chart-wrapper">
  <h3 class="chart-title">{title}</h3>
  <div class="chart-container">
    <canvas id={chartId}></canvas>
  </div>
</div>

<script define:vars={{ chartId, initialChartData, chartOptions, type }}>
  // Chart.jsを読み込む
  import('chart.js/auto').then(async (ChartModule) => {
    const Chart = ChartModule.default;
    
    // チャートを初期化する関数
    function initializeChart(chartData) {
      const ctx = document.getElementById(chartId).getContext('2d');
      
      // 既存のチャートがあれば破棄
      const existingChart = Chart.getChart(ctx);
      if (existingChart) {
        existingChart.destroy();
      }
      
      // 新しいチャートを作成
      new Chart(ctx, {
        type: 'bar',
        data: chartData,
        options: chartOptions
      });
    }
    
    // 初期データでチャートを描画
    initializeChart(initialChartData);
    
    // CSVデータが読み込まれたときにチャートを更新する関数
    function updateChartWithCsvData() {
      console.log(`チャート(${chartId})の更新を開始します...`);
      
      if (!window.__csvDataCache) {
        console.log('CSVデータがまだ読み込まれていません');
        return;
      }
      
      let data;
      if (type === 'sharingMethod') {
        // 個人データの場合
        if (document.querySelector('body').classList.contains('individual-page')) {
          data = window.__csvDataCache['individual_before.csv'];
          if (chartId.includes('after')) {
            data = window.__csvDataCache['individual_after.csv'];
          }
        } else {
          // 事業所データの場合
          data = window.__csvDataCache['business_before.csv'];
          if (chartId.includes('after')) {
            data = window.__csvDataCache['business_after.csv'];
          }
        }
      } else if (type === 'businessScale') {
        // 事業所規模別データの場合
        data = window.__csvDataCache['business_before.csv'];
        if (chartId.includes('after')) {
          data = window.__csvDataCache['business_after.csv'];
        }
      }
      
      if (!data || data.length === 0) {
        console.log('更新用のデータが見つかりません');
        return;
      }
      
      console.log(`チャートデータを更新します: ${data.length}件のデータで計算します`);
      
      // 共有方法ごとの平均時間を計算する関数
      function prepareChartData(data, type) {
        if (!data || data.length === 0) {
          return {
            labels: [],
            datasets: []
          };
        }

        if (type === 'sharingMethod') {
          // 共有方法ごとの平均時間を計算
          const methods = ["FAX", "メール", "持参", "郵送", "システム", "その他"];
          const creationTimes = {};
          const confirmationTimes = {};
          const counts = {};
          
          methods.forEach(method => {
            creationTimes[method] = 0;
            confirmationTimes[method] = 0;
            counts[method] = 0;
          });
          
          data.forEach(row => {
            const method = row["ケアプラン共有方法"] || row["共有方法"];
            if (methods.includes(method)) {
              const creationTime = parseInt(row["1ヶ月あたりの提供票作成時間（分）"]) || 0;
              const confirmationTime = parseInt(row["1ヶ月あたりの実績確認時間（分）"]) || 0;
              
              creationTimes[method] += creationTime;
              confirmationTimes[method] += confirmationTime;
              counts[method]++;
            }
          });
          
          const labels = methods;
          const creationData = methods.map(method => 
            counts[method] > 0 ? Math.round(creationTimes[method] / counts[method]) : 0
          );
          const confirmationData = methods.map(method => 
            counts[method] > 0 ? Math.round(confirmationTimes[method] / counts[method]) : 0
          );
          
          return {
            labels,
            datasets: [
              {
                label: '提供票作成時間（分）',
                data: creationData,
                backgroundColor: 'rgba(54, 162, 235, 0.5)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
              },
              {
                label: '実績確認時間（分）',
                data: confirmationData,
                backgroundColor: 'rgba(255, 99, 132, 0.5)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1
              }
            ]
          };
        } else if (type === 'businessScale') {
          // 事業所規模ごとの平均時間を計算
          const scales = [...new Set(data.map(row => row['事業所規模']))].filter(Boolean);
          const creationTimes = {};
          const confirmationTimes = {};
          const counts = {};
          
          scales.forEach(scale => {
            creationTimes[scale] = 0;
            confirmationTimes[scale] = 0;
            counts[scale] = 0;
          });
          
          data.forEach(row => {
            const scale = row['事業所規模'];
            if (scale && scales.includes(scale)) {
              const creationTime = parseInt(row["1ヶ月あたりの提供票作成時間（分）"]) || 0;
              const confirmationTime = parseInt(row["1ヶ月あたりの実績確認時間（分）"]) || 0;
              
              creationTimes[scale] += creationTime;
              confirmationTimes[scale] += confirmationTime;
              counts[scale]++;
            }
          });
          
          const labels = scales;
          const creationData = scales.map(scale => 
            counts[scale] > 0 ? Math.round(creationTimes[scale] / counts[scale]) : 0
          );
          const confirmationData = scales.map(scale => 
            counts[scale] > 0 ? Math.round(confirmationTimes[scale] / counts[scale]) : 0
          );
          
          return {
            labels,
            datasets: [
              {
                label: '提供票作成時間（分）',
                data: creationData,
                backgroundColor: 'rgba(54, 162, 235, 0.5)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
              },
              {
                label: '実績確認時間（分）',
                data: confirmationData,
                backgroundColor: 'rgba(255, 99, 132, 0.5)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1
              }
            ]
          };
        }
        
        // デフォルトの空のデータを返す
        return {
          labels: [],
          datasets: []
        };
      }
      
      // 新しいチャートデータを準備
      const updatedChartData = prepareChartData(data, type);
      
      // チャートを更新
      initializeChart(updatedChartData);
      
      console.log(`チャート(${chartId})の更新が完了しました`);
    }
    
    // CSVデータが読み込まれたときのイベントリスナー
    window.addEventListener('csv-data-loaded', function(event) {
      console.log('CSVデータ読み込みイベント検知:', event.detail.fileName);
      updateChartWithCsvData();
    });
    
    // ページ読み込み時にCSVデータが既に存在する場合は更新
    if (window.__csvDataCache) {
      updateChartWithCsvData();
    }
  });
</script>

<style>
  .chart-wrapper {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
  }
  
  .chart-title {
    font-size: 1.2rem;
    font-weight: 600;
    margin-bottom: 1rem;
    text-align: center;
    color: #2d3748;
  }
  
  .chart-container {
    flex: 1;
    min-height: 300px;
    position: relative;
  }
</style>
